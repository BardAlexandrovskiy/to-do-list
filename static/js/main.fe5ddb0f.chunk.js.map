{"version":3,"sources":["screens/MainScreen/styles.js","components/Input/styles.js","components/Input/index.js","actions/index.js","components/ToDoItem/styles.js","components/ToDoItem/index.js","screens/MainScreen/index.js","reducers/input.js","reducers/toDo.js","reducers/index.js","store/configureStore.js","App/styles.js","App/index.js","serviceWorker.js","index.js"],"names":["FixContainer","styled","div","Logo","h1","MainContainer","ToDoList","ul","Container","Input","input","AllCompletedButton","button","InputCreateNewTask","handleChangeInput","e","inputChangeValue","props","target","value","handlePressInput","createNewToDo","keyCode","trim","handleClickCheckAllButton","checkAllToDo","this","toDoList","length","onClick","placeholder","onChange","onKeyDown","React","Component","connect","store","toDo","dispatch","type","data","li","check","CheckButton","DeleteButton","ToDoItem","handleClickDeleteButton","id","deleteToDo","handleClickCheckButton","checkToDo","MainScreen","componentDidUpdate","localStorage","setItem","JSON","stringify","map","element","key","initialState","parse","getItem","rootReducer","combineReducers","state","action","concat","Date","now","filter","el","forEach","createStore","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe5ddb0f.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const FixContainer = styled.div`\n  max-width: 550px;\n  margin: 0 auto;\n`\nexport const Logo = styled.h1`\n  font-size: 100px;\n  line-height: 100px;\n  font-weight: 100;\n  color: rgba(175, 47, 47, 0.15);\n  text-align: center;\n  margin-bottom: 10px;\n\n  @media (max-width: 736px) {\n    font-size: 80px;\n  }\n`\n\nexport const MainContainer = styled.div`\n  box-shadow: 0 3px 7px rgba(0, 0, 0, 0.25);\n  background-color: #fff;\n  position: relative;\n`\nexport const ToDoList = styled.ul`\n  list-style-type: none;\n`\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  position: relative;\r\n`\r\n\r\nexport const Input = styled.input`\r\n  width: 100%;\r\n  font-size: 24px;\r\n  line-height: 24px;\r\n  color: #4d4d4d;\r\n  padding: 16px 16px 16px 50px;\r\n  background-color: #fff;\r\n\r\n  &::placeholder {\r\n    opacity: 0.5;\r\n    font-style: italic;\r\n  }\r\n\r\n  @media (max-width: 736px) {\r\n    font-size: 21px;\r\n  }\r\n`\r\n\r\nexport const AllCompletedButton = styled.button`\r\n  position: absolute;\r\n  height: 34px;\r\n  width: 34px;\r\n  font-size: 22px;\r\n  transform: rotate(90deg);\r\n  top: calc(50% - 17px);\r\n  left: 10px;\r\n  line-height: 34px;\r\n  color: rgba(77, 77, 77, 0.5);\r\n`\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  inputChangeValue,\r\n  createNewToDo,\r\n  checkAllToDo,\r\n} from '../../actions/index'\r\nimport { Input, Container, AllCompletedButton } from './styles'\r\n\r\nclass InputCreateNewTask extends React.Component {\r\n  handleChangeInput = (e) => {\r\n    const { inputChangeValue } = this.props\r\n    const value = e.target.value\r\n    inputChangeValue(value)\r\n  }\r\n\r\n  handlePressInput = (e) => {\r\n    const { createNewToDo, value, inputChangeValue } = this.props\r\n    if (e.keyCode === 13 && value.trim()) {\r\n      createNewToDo(value)\r\n      inputChangeValue('')\r\n    }\r\n  }\r\n\r\n  handleClickCheckAllButton = () => {\r\n    const { checkAllToDo } = this.props\r\n    checkAllToDo()\r\n  }\r\n\r\n  render() {\r\n    const { value, toDoList } = this.props\r\n    return (\r\n      <Container>\r\n        {toDoList.length ? (\r\n          <AllCompletedButton onClick={this.handleClickCheckAllButton}>\r\n            ‚ùØ\r\n          </AllCompletedButton>\r\n        ) : null}\r\n        <Input\r\n          placeholder=\"What needs to be done?\"\r\n          value={value}\r\n          onChange={this.handleChangeInput}\r\n          onKeyDown={this.handlePressInput}\r\n        />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    value: store.input.value,\r\n    toDoList: store.toDo.toDoList,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    inputChangeValue: (value) => dispatch(inputChangeValue(value)),\r\n    createNewToDo: (value) => dispatch(createNewToDo(value)),\r\n    checkAllToDo: () => dispatch(checkAllToDo()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputCreateNewTask)\r\n","export const CHANGE_INPUT = 'CHANGE_INPUT'\r\nexport const CREATE_NEW_TO_DO = 'CREATE_NEW_TO_DO'\r\nexport const DELETE_TO_DO = 'DELETE_TO_DO'\r\nexport const CHECK_TO_DO = 'CHECK_TO_DO'\r\nexport const CHECK_ALL_TO_DO = 'CHECK_ALL_TO_DO'\r\n\r\nexport function inputChangeValue(value) {\r\n  return {\r\n    type: CHANGE_INPUT,\r\n    data: value,\r\n  }\r\n}\r\n\r\nexport function createNewToDo(value) {\r\n  return {\r\n    type: CREATE_NEW_TO_DO,\r\n    data: value,\r\n  }\r\n}\r\n\r\nexport function deleteToDo(id) {\r\n  return {\r\n    type: DELETE_TO_DO,\r\n    data: { id },\r\n  }\r\n}\r\n\r\nexport function checkToDo(id) {\r\n  return {\r\n    type: CHECK_TO_DO,\r\n    data: { id },\r\n  }\r\n}\r\n\r\nexport function checkAllToDo() {\r\n  return {\r\n    type: CHECK_ALL_TO_DO,\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.li`\r\n  padding: 16px 40px 16px 50px;\r\n  color: ${(props) =>\r\n    props.check ? 'rgba(77,\t77,\t77, 0.5)' : 'rgba(77,\t77,\t77, 1)'};\r\n  font-size: 24px;\r\n  line-height: 28px;\r\n  border-top: 1px solid #e6e6e6;\r\n  word-wrap: break-word;\r\n  position: relative;\r\n  transition: color 0.3s;\r\n  text-decoration: ${(props) => (props.check ? 'line-through' : 'none')};\r\n\r\n  @media (max-width: 736px) {\r\n    font-size: 21px;\r\n  }\r\n`\r\n\r\nexport const CheckButton = styled.button`\r\n  width: 32px;\r\n  height: 32px;\r\n  line-height: 32px;\r\n  font-size: 24px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  border: 1px solid ${(props) => (props.check ? '#5dc2af' : '#e6e6e6')};\r\n  left: 10px;\r\n  top: 50%;\r\n  cursor: pointer;\r\n  transform: translateY(-50%);\r\n  color: ${(props) => (props.check ? '#5dc2af' : 'transparent')};\r\n  transition: border 0.3s, color 0.3s;\r\n`\r\n\r\nexport const DeleteButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 32px;\r\n  height: 32px;\r\n  line-height: 32px;\r\n  font-size: 24px;\r\n  color: #cc9a9a;\r\n  cursor: pointer;\r\n`\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Container, CheckButton, DeleteButton } from './styles'\r\nimport { deleteToDo, checkToDo } from '../../actions'\r\n\r\nclass ToDoItem extends React.Component {\r\n  handleClickDeleteButton = () => {\r\n    const { id, deleteToDo } = this.props\r\n    deleteToDo(id)\r\n  }\r\n\r\n  handleClickCheckButton = () => {\r\n    const { id, checkToDo } = this.props\r\n    checkToDo(id)\r\n  }\r\n\r\n  render() {\r\n    const { value, check } = this.props\r\n    return (\r\n      <Container check={check}>\r\n        <CheckButton check={check} onClick={this.handleClickCheckButton}>\r\n          ‚úì\r\n        </CheckButton>\r\n        {value}\r\n        <DeleteButton onClick={this.handleClickDeleteButton}>‚úñ</DeleteButton>\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n  return {\r\n    toDoList: store.toDo.toDoList,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deleteToDo: (id) => dispatch(deleteToDo(id)),\r\n    checkToDo: (id) => dispatch(checkToDo(id)),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoItem)\r\n","import React from 'react'\nimport { FixContainer, Logo, MainContainer, ToDoList } from './styles'\nimport { connect } from 'react-redux'\nimport InputCreateNewTask from '../../components/Input'\nimport ToDoItem from '../../components/ToDoItem'\n\nclass MainScreen extends React.Component {\n  componentDidUpdate = () => {\n    const { toDoList } = this.props\n    localStorage.setItem('todos', JSON.stringify({ toDoList }))\n  }\n  render() {\n    const { toDoList } = this.props\n    return (\n      <FixContainer>\n        <Logo>todos</Logo>\n        <MainContainer>\n          <InputCreateNewTask />\n          <ToDoList>\n            {toDoList.map((element) => {\n              return (\n                <ToDoItem\n                  value={element.value}\n                  key={element.id}\n                  check={element.check}\n                  id={element.id}\n                />\n              )\n            })}\n          </ToDoList>\n        </MainContainer>\n      </FixContainer>\n    )\n  }\n}\n\nconst mapStateToProps = (store) => {\n  return {\n    toDoList: store.toDo.toDoList,\n  }\n}\n\nexport default connect(mapStateToProps)(MainScreen)\n","import { CHANGE_INPUT } from '../actions/index'\r\n\r\nconst initialState = {\r\n  value: '',\r\n}\r\n\r\nexport function inputReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_INPUT:\r\n      return { ...state, value: action.data }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  CREATE_NEW_TO_DO,\r\n  DELETE_TO_DO,\r\n  CHECK_TO_DO,\r\n  CHECK_ALL_TO_DO,\r\n} from '../actions/index'\r\n\r\nconst initialState = JSON.parse(localStorage.getItem('todos')) || {\r\n  toDoList: [],\r\n}\r\n\r\nexport function toDoReducer(state = initialState, action) {\r\n  const { toDoList } = state\r\n  const { data, type } = action\r\n  switch (type) {\r\n    case CREATE_NEW_TO_DO:\r\n      return {\r\n        ...state,\r\n        toDoList: toDoList.concat({\r\n          value: data,\r\n          check: false,\r\n          id: Date.now(),\r\n        }),\r\n      }\r\n    case DELETE_TO_DO:\r\n      return {\r\n        ...state,\r\n        toDoList: toDoList.filter(({ id }) => id !== data.id),\r\n      }\r\n    case CHECK_TO_DO:\r\n      return {\r\n        ...state,\r\n        toDoList: toDoList.map(el => {\r\n          if (el.id === data.id) {\r\n            return { ...el, check: !el.check }\r\n          }\r\n          return el\r\n        }),\r\n      }\r\n    case CHECK_ALL_TO_DO:\r\n      let check = false\r\n      toDoList.forEach(el => {\r\n        if (!el.check) {\r\n          check = true\r\n        }\r\n      })\r\n      return {\r\n        ...state,\r\n        toDoList: toDoList.map(el => {\r\n          return { ...el, check: check }\r\n        }),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { inputReducer } from './input'\r\nimport { toDoReducer } from './toDo'\r\n\r\nexport const rootReducer = combineReducers({\r\n  input: inputReducer,\r\n  toDo: toDoReducer,\r\n})\r\n","import { createStore } from 'redux'\r\nimport { rootReducer } from '../reducers/index'\r\n\r\nexport const store = createStore(rootReducer)\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-family: 'Roboto', sans-serif;\r\n  border: 0;\r\n  outline: 0;\r\n  background: transparent;\r\n}\r\n\r\nbody {\r\n  padding: 10px;\r\n  background: #f5f5f5;\r\n  min-width: 320px;\r\n}\r\n`\r\nexport default GlobalStyle\r\n","import React from 'react'\r\nimport MainScreen from '../screens/MainScreen'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from '../store/configureStore'\r\nimport GlobalStyle from './styles'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <GlobalStyle />\r\n      <MainScreen />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}